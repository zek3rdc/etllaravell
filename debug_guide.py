"""
Gu√≠a de Debug y Testing Manual para Sistema ETL Avanzado
"""

import requests
import json
import time
from pathlib import Path

# Configuraci√≥n
BASE_URL = "http://localhost:8001"  # Cambiar puerto si es necesario
API_URL = f"{BASE_URL}/api/etl"

class ETLDebugger:
    """Clase para hacer debug del sistema ETL"""
    
    def __init__(self):
        self.session_id = None
        self.job_id = None
        
    def print_response(self, response, title="Response"):
        """Imprimir respuesta de forma legible"""
        print(f"\n{'='*50}")
        print(f"{title}")
        print(f"{'='*50}")
        print(f"Status Code: {response.status_code}")
        print(f"Headers: {dict(response.headers)}")
        
        try:
            data = response.json()
            print(f"JSON Response:")
            print(json.dumps(data, indent=2, ensure_ascii=False))
        except:
            print(f"Text Response: {response.text}")
        
        print(f"{'='*50}\n")
    
    def test_health(self):
        """1. Probar endpoint de salud"""
        print("üîç PASO 1: Probando endpoint de salud...")
        
        try:
            response = requests.get(f"{API_URL}/health")
            self.print_response(response, "Health Check")
            
            if response.status_code == 200:
                print("‚úÖ Servidor funcionando correctamente")
                return True
            else:
                print("‚ùå Servidor no responde correctamente")
                return False
                
        except requests.exceptions.ConnectionError:
            print("‚ùå Error: No se puede conectar al servidor")
            print("üí° Soluci√≥n: Aseg√∫rate de que el servidor est√© ejecut√°ndose:")
            print("   cd etl_app && python main_advanced.py")
            return False
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            return False
    
    def test_upload(self):
        """2. Probar carga de archivo"""
        print("üîç PASO 2: Probando carga de archivo...")
        
        # Crear archivo de prueba
        test_file = Path("test_data.csv")
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write("nombre,edad,email,salario\n")
            f.write("Juan P√©rez,30,juan@test.com,50000\n")
            f.write("Mar√≠a Garc√≠a,25,maria@test.com,45000\n")
            f.write("Carlos L√≥pez,35,,60000\n")  # Email vac√≠o para probar validaciones
            f.write("Ana Mart√≠n,28,ana@invalid,55000\n")  # Email inv√°lido
        
        try:
            with open(test_file, 'rb') as f:
                files = {'file': ('test_data.csv', f, 'text/csv')}
                response = requests.post(f"{API_URL}/upload", files=files)
            
            self.print_response(response, "File Upload")
            
            if response.status_code == 200:
                data = response.json()
                self.session_id = data.get('session_id')
                print(f"‚úÖ Archivo cargado exitosamente")
                print(f"üìù Session ID: {self.session_id}")
                return True
            else:
                print("‚ùå Error cargando archivo")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
        finally:
            # Limpiar archivo de prueba
            if test_file.exists():
                test_file.unlink()
    
    def test_preview(self):
        """3. Probar vista previa"""
        print("üîç PASO 3: Probando vista previa de datos...")
        
        if not self.session_id:
            print("‚ùå Error: No hay session_id disponible")
            return False
        
        try:
            data = {
                'session_id': self.session_id,
                'sheet': 'default'
            }
            response = requests.post(f"{API_URL}/preview", data=data)
            self.print_response(response, "Data Preview")
            
            if response.status_code == 200:
                print("‚úÖ Vista previa obtenida exitosamente")
                return True
            else:
                print("‚ùå Error obteniendo vista previa")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_validation(self):
        """4. Probar validaciones"""
        print("üîç PASO 4: Probando validaciones de datos...")
        
        if not self.session_id:
            print("‚ùå Error: No hay session_id disponible")
            return False
        
        try:
            payload = {
                'session_id': self.session_id,
                'sheet': 'default'
            }
            response = requests.post(f"{API_URL}/validate", json=payload)
            self.print_response(response, "Data Validation")
            
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Validaciones completadas")
                print(f"üìä Resumen:")
                print(f"   - Errores: {data['summary']['errors']}")
                print(f"   - Advertencias: {data['summary']['warnings']}")
                print(f"   - Info: {data['summary']['info']}")
                return True
            else:
                print("‚ùå Error en validaciones")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_transformations(self):
        """5. Probar transformaciones disponibles"""
        print("üîç PASO 5: Probando transformaciones disponibles...")
        
        try:
            response = requests.get(f"{API_URL}/transformations/available")
            self.print_response(response, "Available Transformations")
            
            if response.status_code == 200:
                print("‚úÖ Transformaciones obtenidas exitosamente")
                return True
            else:
                print("‚ùå Error obteniendo transformaciones")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_custom_transformation(self):
        """6. Probar transformaci√≥n personalizada"""
        print("üîç PASO 6: Probando creaci√≥n de transformaci√≥n personalizada...")
        
        code = """
def transform(value):
    '''Convierte texto a may√∫sculas y remueve espacios extra'''
    if isinstance(value, str):
        return value.upper().strip()
    return value
"""
        
        try:
            data = {
                'name': 'clean_uppercase',
                'description': 'Limpia y convierte a may√∫sculas',
                'code': code,
                'parameters': '{}'
            }
            response = requests.post(f"{API_URL}/transformations/custom", data=data)
            self.print_response(response, "Custom Transformation")
            
            if response.status_code == 200:
                print("‚úÖ Transformaci√≥n personalizada creada")
                return True
            else:
                print("‚ùå Error creando transformaci√≥n personalizada")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_async_processing(self):
        """7. Probar procesamiento as√≠ncrono"""
        print("üîç PASO 7: Probando procesamiento as√≠ncrono...")
        
        if not self.session_id:
            print("‚ùå Error: No hay session_id disponible")
            return False
        
        try:
            data = {
                'session_id': self.session_id,
                'sheet': 'default',
                'column_mapping': json.dumps({
                    'nombre': 'name',
                    'edad': 'age',
                    'email': 'email',
                    'salario': 'salary'
                }),
                'transformations': json.dumps({
                    'name': {
                        'type': 'text',
                        'options': {'text_transform': 'title'}
                    },
                    'email': {
                        'type': 'text',
                        'options': {'text_transform': 'lower'}
                    }
                }),
                'target_table': 'test_personas',
                'mode': 'insert',
                'config_name': 'test_config_debug'
            }
            
            response = requests.post(f"{API_URL}/process-async", data=data)
            self.print_response(response, "Async Processing")
            
            if response.status_code == 200:
                result = response.json()
                self.job_id = result.get('job_id')
                print(f"‚úÖ Procesamiento iniciado")
                print(f"üìù Job ID: {self.job_id}")
                return True
            else:
                print("‚ùå Error iniciando procesamiento")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_job_status(self):
        """8. Probar estado de trabajo"""
        print("üîç PASO 8: Probando estado de trabajo...")
        
        if not self.job_id:
            print("‚ùå Error: No hay job_id disponible")
            return False
        
        try:
            response = requests.get(f"{API_URL}/job-status/{self.job_id}")
            self.print_response(response, "Job Status")
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status', 'unknown')
                print(f"‚úÖ Estado del trabajo: {status}")
                
                # Monitorear progreso
                if status in ['pending', 'processing']:
                    print("‚è≥ Monitoreando progreso...")
                    for i in range(10):  # M√°ximo 10 intentos
                        time.sleep(2)
                        response = requests.get(f"{API_URL}/job-status/{self.job_id}")
                        if response.status_code == 200:
                            data = response.json()
                            new_status = data.get('status', 'unknown')
                            progress = data.get('progress', 0)
                            print(f"   Estado: {new_status}, Progreso: {progress}%")
                            
                            if new_status in ['completed', 'failed']:
                                break
                
                return True
            else:
                print("‚ùå Error obteniendo estado del trabajo")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_config_management(self):
        """9. Probar gesti√≥n de configuraciones"""
        print("üîç PASO 9: Probando gesti√≥n de configuraciones...")
        
        config = {
            "name": "debug_config",
            "description": "Configuraci√≥n de debug",
            "column_mapping": {
                "nombre": "name",
                "edad": "age",
                "email": "email"
            },
            "transformations": {
                "name": {
                    "type": "text",
                    "options": {"text_transform": "title"}
                }
            },
            "target_table": "test_table",
            "mode": "insert",
            "version": "1.0"
        }
        
        try:
            # Guardar configuraci√≥n
            response = requests.post(f"{API_URL}/config/save-versioned", json=config)
            self.print_response(response, "Save Config")
            
            if response.status_code == 200:
                print("‚úÖ Configuraci√≥n guardada")
                
                # Obtener versiones
                response = requests.get(f"{API_URL}/config/debug_config/versions")
                self.print_response(response, "Config Versions")
                
                return True
            else:
                print("‚ùå Error guardando configuraci√≥n")
                return False
                
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_history_and_stats(self):
        """10. Probar historial y estad√≠sticas"""
        print("üîç PASO 10: Probando historial y estad√≠sticas...")
        
        try:
            # Historial
            response = requests.get(f"{API_URL}/history")
            self.print_response(response, "Load History")
            
            # Estad√≠sticas
            response = requests.get(f"{API_URL}/history/statistics")
            self.print_response(response, "Load Statistics")
            
            print("‚úÖ Historial y estad√≠sticas obtenidos")
            return True
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def test_notifications(self):
        """11. Probar notificaciones"""
        print("üîç PASO 11: Probando sistema de notificaciones...")
        
        try:
            # Plantillas
            response = requests.get(f"{API_URL}/notifications/templates")
            self.print_response(response, "Notification Templates")
            
            # Configurar notificaci√≥n de prueba
            config = {
                "name": "debug_notification",
                "type": "email",
                "config": {
                    "smtp_server": "smtp.test.com",
                    "smtp_port": 587,
                    "username": "test@test.com",
                    "password": "test123",
                    "from_email": "etl@test.com",
                    "to_emails": ["admin@test.com"]
                },
                "events": {
                    "types": ["load_completed", "load_failed"],
                    "conditions": {"only_on_errors": False}
                }
            }
            
            response = requests.post(f"{API_URL}/notifications/config", json=config)
            self.print_response(response, "Create Notification Config")
            
            print("‚úÖ Sistema de notificaciones probado")
            return True
            
        except Exception as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def run_full_test(self):
        """Ejecutar todas las pruebas"""
        print("üöÄ INICIANDO TESTING COMPLETO DEL SISTEMA ETL AVANZADO")
        print("=" * 60)
        
        tests = [
            self.test_health,
            self.test_upload,
            self.test_preview,
            self.test_validation,
            self.test_transformations,
            self.test_custom_transformation,
            self.test_async_processing,
            self.test_job_status,
            self.test_config_management,
            self.test_history_and_stats,
            self.test_notifications
        ]
        
        passed = 0
        failed = 0
        
        for test in tests:
            try:
                if test():
                    passed += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå Error ejecutando {test.__name__}: {e}")
                failed += 1
            
            print("\n" + "-" * 60 + "\n")
        
        print("üìä RESUMEN DE PRUEBAS:")
        print(f"‚úÖ Pasaron: {passed}")
        print(f"‚ùå Fallaron: {failed}")
        print(f"üìà Tasa de √©xito: {(passed/(passed+failed)*100):.1f}%")
        
        if failed > 0:
            print("\nüîß CONSEJOS DE DEBUG:")
            print("1. Verificar que el servidor est√© ejecut√°ndose")
            print("2. Verificar configuraci√≥n de base de datos")
            print("3. Revisar logs del servidor para errores espec√≠ficos")
            print("4. Verificar que las tablas ETL est√©n creadas")

def main():
    """Funci√≥n principal"""
    print("üéØ GU√çA DE DEBUG Y TESTING - SISTEMA ETL AVANZADO")
    print("=" * 60)
    print("Esta herramienta te ayudar√° a probar y hacer debug del sistema ETL")
    print("Aseg√∫rate de que el servidor est√© ejecut√°ndose en http://localhost:8001")
    print("=" * 60)
    
    debugger = ETLDebugger()
    
    while True:
        print("\nüîß OPCIONES DE DEBUG:")
        print("1. Ejecutar todas las pruebas")
        print("2. Probar endpoint espec√≠fico")
        print("3. Mostrar gu√≠a de debug")
        print("0. Salir")
        
        choice = input("\nSelecciona una opci√≥n: ").strip()
        
        if choice == "1":
            debugger.run_full_test()
        elif choice == "2":
            print("\nüìã ENDPOINTS DISPONIBLES:")
            tests = [
                ("Health Check", debugger.test_health),
                ("Upload File", debugger.test_upload),
                ("Preview Data", debugger.test_preview),
                ("Validate Data", debugger.test_validation),
                ("Transformations", debugger.test_transformations),
                ("Custom Transformation", debugger.test_custom_transformation),
                ("Async Processing", debugger.test_async_processing),
                ("Job Status", debugger.test_job_status),
                ("Config Management", debugger.test_config_management),
                ("History & Stats", debugger.test_history_and_stats),
                ("Notifications", debugger.test_notifications)
            ]
            
            for i, (name, _) in enumerate(tests, 1):
                print(f"{i}. {name}")
            
            try:
                test_choice = int(input("\nSelecciona prueba: ")) - 1
                if 0 <= test_choice < len(tests):
                    tests[test_choice][1]()
                else:
                    print("‚ùå Opci√≥n inv√°lida")
            except ValueError:
                print("‚ùå Por favor ingresa un n√∫mero v√°lido")
                
        elif choice == "3":
            show_debug_guide()
        elif choice == "0":
            print("üëã ¬°Hasta luego!")
            break
        else:
            print("‚ùå Opci√≥n inv√°lida")

def show_debug_guide():
    """Mostrar gu√≠a de debug"""
    print("\nüìö GU√çA DE DEBUG PARA SISTEMA ETL")
    print("=" * 50)
    print("""
üîç PASOS PARA HACER DEBUG:

1. VERIFICAR SERVIDOR:
   - Ejecutar: cd etl_app && python main_advanced.py
   - Verificar que responda en http://localhost:8001

2. VERIFICAR BASE DE DATOS:
   - Ejecutar migraciones: psql -f migrations/create_etl_advanced_tables.sql
   - Verificar conexi√≥n en config.py

3. USAR HERRAMIENTAS DE DEBUG:
   - Logs del servidor: revisar consola donde ejecutas main_advanced.py
   - Logs de aplicaci√≥n: etl_app/logs/etl_app.log
   - Respuestas HTTP: usar esta herramienta o Postman

4. ERRORES COMUNES:
   - 500 Internal Server Error: Error en c√≥digo Python o BD
   - 404 Not Found: Endpoint incorrecto o servidor no ejecut√°ndose
   - 400 Bad Request: Datos de entrada incorrectos

5. COMANDOS √öTILES:
   - curl -X GET http://localhost:8001/health
   - curl -X POST http://localhost:8001/api/etl/upload -F "file=@test.csv"

6. DEBUGGING CON PYTHON:
   - Agregar print() en el c√≥digo
   - Usar logging.debug() para m√°s detalles
   - Usar try/except para capturar errores espec√≠ficos
""")

if __name__ == "__main__":
    main()
